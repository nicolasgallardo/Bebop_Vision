//#line 2 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the bebop_driver package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __bebop_driver__BEBOPARDRONE3CONFIG_H__
#define __bebop_driver__BEBOPARDRONE3CONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace bebop_driver
{
  class BebopArdrone3ConfigStatics;
  
  class BebopArdrone3Config
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(BebopArdrone3Config &config, const BebopArdrone3Config &max, const BebopArdrone3Config &min) const = 0;
      virtual void calcLevel(uint32_t &level, const BebopArdrone3Config &config1, const BebopArdrone3Config &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, BebopArdrone3Config &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const BebopArdrone3Config &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, BebopArdrone3Config &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const BebopArdrone3Config &config) const = 0;
      virtual void getValue(const BebopArdrone3Config &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T BebopArdrone3Config::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (BebopArdrone3Config::* field);

      virtual void clamp(BebopArdrone3Config &config, const BebopArdrone3Config &max, const BebopArdrone3Config &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const BebopArdrone3Config &config1, const BebopArdrone3Config &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, BebopArdrone3Config &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const BebopArdrone3Config &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, BebopArdrone3Config &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const BebopArdrone3Config &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const BebopArdrone3Config &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, BebopArdrone3Config &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string name, std::string type, int parent, int id, bool s, T PT::* f) : AbstractGroupDescription(name, type, parent, id, s), field(f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, BebopArdrone3Config &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<BebopArdrone3Config::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(BebopArdrone3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class PILOTINGSETTINGS
{
  public:
    PILOTINGSETTINGS()
    {
      state = true;
      name = "pilotingsettings";
    }

    void setParams(BebopArdrone3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("PilotingSettingsMaxAltitudeCurrent"==(*_i)->name){PilotingSettingsMaxAltitudeCurrent = boost::any_cast<double>(val);}
        if("PilotingSettingsMaxTiltCurrent"==(*_i)->name){PilotingSettingsMaxTiltCurrent = boost::any_cast<double>(val);}
        if("PilotingSettingsAbsolutControlOn"==(*_i)->name){PilotingSettingsAbsolutControlOn = boost::any_cast<int>(val);}
        if("PilotingSettingsMaxDistanceValue"==(*_i)->name){PilotingSettingsMaxDistanceValue = boost::any_cast<double>(val);}
        if("PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover"==(*_i)->name){PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover = boost::any_cast<int>(val);}
      }
    }

    double PilotingSettingsMaxAltitudeCurrent;
double PilotingSettingsMaxTiltCurrent;
int PilotingSettingsAbsolutControlOn;
double PilotingSettingsMaxDistanceValue;
int PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover;

    bool state;
    std::string name;

    
}pilotingsettings;

class SPEEDSETTINGS
{
  public:
    SPEEDSETTINGS()
    {
      state = true;
      name = "speedsettings";
    }

    void setParams(BebopArdrone3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("SpeedSettingsMaxVerticalSpeedCurrent"==(*_i)->name){SpeedSettingsMaxVerticalSpeedCurrent = boost::any_cast<double>(val);}
        if("SpeedSettingsMaxRotationSpeedCurrent"==(*_i)->name){SpeedSettingsMaxRotationSpeedCurrent = boost::any_cast<double>(val);}
        if("SpeedSettingsHullProtectionPresent"==(*_i)->name){SpeedSettingsHullProtectionPresent = boost::any_cast<int>(val);}
        if("SpeedSettingsOutdoorOutdoor"==(*_i)->name){SpeedSettingsOutdoorOutdoor = boost::any_cast<int>(val);}
      }
    }

    double SpeedSettingsMaxVerticalSpeedCurrent;
double SpeedSettingsMaxRotationSpeedCurrent;
int SpeedSettingsHullProtectionPresent;
int SpeedSettingsOutdoorOutdoor;

    bool state;
    std::string name;

    
}speedsettings;

class NETWORKSETTINGS
{
  public:
    NETWORKSETTINGS()
    {
      state = true;
      name = "networksettings";
    }

    void setParams(BebopArdrone3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("NetworkSettingsWifiSelectionType"==(*_i)->name){NetworkSettingsWifiSelectionType = boost::any_cast<int>(val);}
        if("NetworkSettingsWifiSelectionBand"==(*_i)->name){NetworkSettingsWifiSelectionBand = boost::any_cast<int>(val);}
        if("NetworkSettingsWifiSelectionChannel"==(*_i)->name){NetworkSettingsWifiSelectionChannel = boost::any_cast<int>(val);}
      }
    }

    int NetworkSettingsWifiSelectionType;
int NetworkSettingsWifiSelectionBand;
int NetworkSettingsWifiSelectionChannel;

    bool state;
    std::string name;

    
}networksettings;

class SETTINGS
{
  public:
    SETTINGS()
    {
      state = true;
      name = "settings";
    }

    void setParams(BebopArdrone3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    
}settings;

class PICTURESETTINGS
{
  public:
    PICTURESETTINGS()
    {
      state = true;
      name = "picturesettings";
    }

    void setParams(BebopArdrone3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    
}picturesettings;

class GPSSETTINGS
{
  public:
    GPSSETTINGS()
    {
      state = true;
      name = "gpssettings";
    }

    void setParams(BebopArdrone3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("GPSSettingsHomeTypeType"==(*_i)->name){GPSSettingsHomeTypeType = boost::any_cast<int>(val);}
        if("GPSSettingsReturnHomeDelayDelay"==(*_i)->name){GPSSettingsReturnHomeDelayDelay = boost::any_cast<int>(val);}
      }
    }

    int GPSSettingsHomeTypeType;
int GPSSettingsReturnHomeDelayDelay;

    bool state;
    std::string name;

    
}gpssettings;

}groups;



//#line 16 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      double PilotingSettingsMaxAltitudeCurrent;
//#line 18 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      double PilotingSettingsMaxTiltCurrent;
//#line 24 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      int PilotingSettingsAbsolutControlOn;
//#line 26 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      double PilotingSettingsMaxDistanceValue;
//#line 32 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      int PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover;
//#line 37 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      double SpeedSettingsMaxVerticalSpeedCurrent;
//#line 39 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      double SpeedSettingsMaxRotationSpeedCurrent;
//#line 45 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      int SpeedSettingsHullProtectionPresent;
//#line 51 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      int SpeedSettingsOutdoorOutdoor;
//#line 60 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      int NetworkSettingsWifiSelectionType;
//#line 66 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      int NetworkSettingsWifiSelectionBand;
//#line 67 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      int NetworkSettingsWifiSelectionChannel;
//#line 82 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      int GPSSettingsHomeTypeType;
//#line 84 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      int GPSSettingsReturnHomeDelayDelay;
//#line 218 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("BebopArdrone3Config::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const BebopArdrone3Config &__max__ = __getMax__();
      const BebopArdrone3Config &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const BebopArdrone3Config &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const BebopArdrone3Config &__getDefault__();
    static const BebopArdrone3Config &__getMax__();
    static const BebopArdrone3Config &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const BebopArdrone3ConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void BebopArdrone3Config::ParamDescription<std::string>::clamp(BebopArdrone3Config &config, const BebopArdrone3Config &max, const BebopArdrone3Config &min) const
  {
    return;
  }

  class BebopArdrone3ConfigStatics
  {
    friend class BebopArdrone3Config;
    
    BebopArdrone3ConfigStatics()
    {
BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT, BebopArdrone3Config> Default("Default", "", 0, 0, true, &BebopArdrone3Config::groups);
BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::PILOTINGSETTINGS, BebopArdrone3Config::DEFAULT> pilotingsettings("pilotingsettings", "", 0, 1, true, &BebopArdrone3Config::DEFAULT::pilotingsettings);
//#line 16 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.PilotingSettingsMaxAltitudeCurrent = 0.0;
//#line 16 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.PilotingSettingsMaxAltitudeCurrent = 160.0;
//#line 16 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.PilotingSettingsMaxAltitudeCurrent = 0.0;
//#line 16 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      pilotingsettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<double>("PilotingSettingsMaxAltitudeCurrent", "double", 0, "Current altitude max in m", "", &BebopArdrone3Config::PilotingSettingsMaxAltitudeCurrent)));
//#line 16 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<double>("PilotingSettingsMaxAltitudeCurrent", "double", 0, "Current altitude max in m", "", &BebopArdrone3Config::PilotingSettingsMaxAltitudeCurrent)));
//#line 18 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.PilotingSettingsMaxTiltCurrent = -180.0;
//#line 18 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.PilotingSettingsMaxTiltCurrent = 180.0;
//#line 18 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.PilotingSettingsMaxTiltCurrent = 0.0;
//#line 18 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      pilotingsettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<double>("PilotingSettingsMaxTiltCurrent", "double", 0, "Current tilt max in degree", "", &BebopArdrone3Config::PilotingSettingsMaxTiltCurrent)));
//#line 18 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<double>("PilotingSettingsMaxTiltCurrent", "double", 0, "Current tilt max in degree", "", &BebopArdrone3Config::PilotingSettingsMaxTiltCurrent)));
//#line 24 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.PilotingSettingsAbsolutControlOn = 0;
//#line 24 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.PilotingSettingsAbsolutControlOn = 1;
//#line 24 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.PilotingSettingsAbsolutControlOn = 0;
//#line 24 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      pilotingsettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("PilotingSettingsAbsolutControlOn", "int", 0, "1 to enable, 0 to disable", "{'enum_description': '1 to enable, 0 to disable', 'enum': [{'srcline': 21, 'description': 'Disabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'PilotingSettingsAbsolutControlOn_OFF'}, {'srcline': 22, 'description': 'Enabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'PilotingSettingsAbsolutControlOn_ON'}]}", &BebopArdrone3Config::PilotingSettingsAbsolutControlOn)));
//#line 24 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("PilotingSettingsAbsolutControlOn", "int", 0, "1 to enable, 0 to disable", "{'enum_description': '1 to enable, 0 to disable', 'enum': [{'srcline': 21, 'description': 'Disabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'PilotingSettingsAbsolutControlOn_OFF'}, {'srcline': 22, 'description': 'Enabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'PilotingSettingsAbsolutControlOn_ON'}]}", &BebopArdrone3Config::PilotingSettingsAbsolutControlOn)));
//#line 26 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.PilotingSettingsMaxDistanceValue = 0.0;
//#line 26 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.PilotingSettingsMaxDistanceValue = 160.0;
//#line 26 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.PilotingSettingsMaxDistanceValue = 0.0;
//#line 26 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      pilotingsettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<double>("PilotingSettingsMaxDistanceValue", "double", 0, "Current max distance in meter", "", &BebopArdrone3Config::PilotingSettingsMaxDistanceValue)));
//#line 26 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<double>("PilotingSettingsMaxDistanceValue", "double", 0, "Current max distance in meter", "", &BebopArdrone3Config::PilotingSettingsMaxDistanceValue)));
//#line 32 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover = 0;
//#line 32 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover = 1;
//#line 32 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover = 0;
//#line 32 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      pilotingsettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover", "int", 0, "1 if the drone cant fly further than max distance, 0 if no limitation on the drone should be done", "{'enum_description': '1 if the drone cant fly further than max distance, 0 if no limitation on the drone should be done', 'enum': [{'srcline': 29, 'description': 'Disabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_OFF'}, {'srcline': 30, 'description': 'Enabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_ON'}]}", &BebopArdrone3Config::PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover)));
//#line 32 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover", "int", 0, "1 if the drone cant fly further than max distance, 0 if no limitation on the drone should be done", "{'enum_description': '1 if the drone cant fly further than max distance, 0 if no limitation on the drone should be done', 'enum': [{'srcline': 29, 'description': 'Disabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_OFF'}, {'srcline': 30, 'description': 'Enabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_ON'}]}", &BebopArdrone3Config::PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover)));
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      pilotingsettings.convertParams();
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::PILOTINGSETTINGS, BebopArdrone3Config::DEFAULT>(pilotingsettings)));
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::PILOTINGSETTINGS, BebopArdrone3Config::DEFAULT>(pilotingsettings)));
BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::SPEEDSETTINGS, BebopArdrone3Config::DEFAULT> speedsettings("speedsettings", "", 0, 2, true, &BebopArdrone3Config::DEFAULT::speedsettings);
//#line 37 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.SpeedSettingsMaxVerticalSpeedCurrent = 0.0;
//#line 37 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.SpeedSettingsMaxVerticalSpeedCurrent = 10.0;
//#line 37 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.SpeedSettingsMaxVerticalSpeedCurrent = 0.0;
//#line 37 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      speedsettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<double>("SpeedSettingsMaxVerticalSpeedCurrent", "double", 0, "Current max vertical speed in m/s", "", &BebopArdrone3Config::SpeedSettingsMaxVerticalSpeedCurrent)));
//#line 37 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<double>("SpeedSettingsMaxVerticalSpeedCurrent", "double", 0, "Current max vertical speed in m/s", "", &BebopArdrone3Config::SpeedSettingsMaxVerticalSpeedCurrent)));
//#line 39 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.SpeedSettingsMaxRotationSpeedCurrent = 0.0;
//#line 39 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.SpeedSettingsMaxRotationSpeedCurrent = 900.0;
//#line 39 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.SpeedSettingsMaxRotationSpeedCurrent = 0.0;
//#line 39 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      speedsettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<double>("SpeedSettingsMaxRotationSpeedCurrent", "double", 0, "Current max rotation speed in degree/s", "", &BebopArdrone3Config::SpeedSettingsMaxRotationSpeedCurrent)));
//#line 39 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<double>("SpeedSettingsMaxRotationSpeedCurrent", "double", 0, "Current max rotation speed in degree/s", "", &BebopArdrone3Config::SpeedSettingsMaxRotationSpeedCurrent)));
//#line 45 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.SpeedSettingsHullProtectionPresent = 0;
//#line 45 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.SpeedSettingsHullProtectionPresent = 1;
//#line 45 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.SpeedSettingsHullProtectionPresent = 0;
//#line 45 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      speedsettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("SpeedSettingsHullProtectionPresent", "int", 0, "1 if present, 0 if not present", "{'enum_description': '1 if present, 0 if not present', 'enum': [{'srcline': 42, 'description': 'Disabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SpeedSettingsHullProtectionPresent_OFF'}, {'srcline': 43, 'description': 'Enabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SpeedSettingsHullProtectionPresent_ON'}]}", &BebopArdrone3Config::SpeedSettingsHullProtectionPresent)));
//#line 45 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("SpeedSettingsHullProtectionPresent", "int", 0, "1 if present, 0 if not present", "{'enum_description': '1 if present, 0 if not present', 'enum': [{'srcline': 42, 'description': 'Disabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SpeedSettingsHullProtectionPresent_OFF'}, {'srcline': 43, 'description': 'Enabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SpeedSettingsHullProtectionPresent_ON'}]}", &BebopArdrone3Config::SpeedSettingsHullProtectionPresent)));
//#line 51 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.SpeedSettingsOutdoorOutdoor = 0;
//#line 51 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.SpeedSettingsOutdoorOutdoor = 1;
//#line 51 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.SpeedSettingsOutdoorOutdoor = 0;
//#line 51 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      speedsettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("SpeedSettingsOutdoorOutdoor", "int", 0, "1 if outdoor flight, 0 if indoor flight", "{'enum_description': '1 if outdoor flight, 0 if indoor flight', 'enum': [{'srcline': 48, 'description': 'Disabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SpeedSettingsOutdoorOutdoor_OFF'}, {'srcline': 49, 'description': 'Enabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SpeedSettingsOutdoorOutdoor_ON'}]}", &BebopArdrone3Config::SpeedSettingsOutdoorOutdoor)));
//#line 51 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("SpeedSettingsOutdoorOutdoor", "int", 0, "1 if outdoor flight, 0 if indoor flight", "{'enum_description': '1 if outdoor flight, 0 if indoor flight', 'enum': [{'srcline': 48, 'description': 'Disabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SpeedSettingsOutdoorOutdoor_OFF'}, {'srcline': 49, 'description': 'Enabled', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SpeedSettingsOutdoorOutdoor_ON'}]}", &BebopArdrone3Config::SpeedSettingsOutdoorOutdoor)));
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      speedsettings.convertParams();
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::SPEEDSETTINGS, BebopArdrone3Config::DEFAULT>(speedsettings)));
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::SPEEDSETTINGS, BebopArdrone3Config::DEFAULT>(speedsettings)));
BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::NETWORKSETTINGS, BebopArdrone3Config::DEFAULT> networksettings("networksettings", "", 0, 3, true, &BebopArdrone3Config::DEFAULT::networksettings);
//#line 60 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.NetworkSettingsWifiSelectionType = 0;
//#line 60 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.NetworkSettingsWifiSelectionType = 1;
//#line 60 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.NetworkSettingsWifiSelectionType = 0;
//#line 60 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      networksettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("NetworkSettingsWifiSelectionType", "int", 0, "The type of wifi selection (auto, manual)", "{'enum_description': 'The type of wifi selection (auto, manual)', 'enum': [{'srcline': 57, 'description': 'Auto selection', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'NetworkSettingsWifiSelectionType_auto'}, {'srcline': 58, 'description': 'Manual selection', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'NetworkSettingsWifiSelectionType_manual'}]}", &BebopArdrone3Config::NetworkSettingsWifiSelectionType)));
//#line 60 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("NetworkSettingsWifiSelectionType", "int", 0, "The type of wifi selection (auto, manual)", "{'enum_description': 'The type of wifi selection (auto, manual)', 'enum': [{'srcline': 57, 'description': 'Auto selection', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'NetworkSettingsWifiSelectionType_auto'}, {'srcline': 58, 'description': 'Manual selection', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'NetworkSettingsWifiSelectionType_manual'}]}", &BebopArdrone3Config::NetworkSettingsWifiSelectionType)));
//#line 66 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.NetworkSettingsWifiSelectionBand = 0;
//#line 66 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.NetworkSettingsWifiSelectionBand = 2;
//#line 66 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.NetworkSettingsWifiSelectionBand = 0;
//#line 66 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      networksettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("NetworkSettingsWifiSelectionBand", "int", 0, "The allowed band(s) : 2.4 Ghz, 5 Ghz, or all", "{'enum_description': 'The allowed band(s) : 2.4 Ghz, 5 Ghz, or all', 'enum': [{'srcline': 62, 'description': '2.4 GHz band', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'NetworkSettingsWifiSelectionBand_2_4ghz'}, {'srcline': 63, 'description': '5 GHz band', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'NetworkSettingsWifiSelectionBand_5ghz'}, {'srcline': 64, 'description': 'Both 2.4 and 5 GHz bands', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'NetworkSettingsWifiSelectionBand_all'}]}", &BebopArdrone3Config::NetworkSettingsWifiSelectionBand)));
//#line 66 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("NetworkSettingsWifiSelectionBand", "int", 0, "The allowed band(s) : 2.4 Ghz, 5 Ghz, or all", "{'enum_description': 'The allowed band(s) : 2.4 Ghz, 5 Ghz, or all', 'enum': [{'srcline': 62, 'description': '2.4 GHz band', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'NetworkSettingsWifiSelectionBand_2_4ghz'}, {'srcline': 63, 'description': '5 GHz band', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'NetworkSettingsWifiSelectionBand_5ghz'}, {'srcline': 64, 'description': 'Both 2.4 and 5 GHz bands', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'NetworkSettingsWifiSelectionBand_all'}]}", &BebopArdrone3Config::NetworkSettingsWifiSelectionBand)));
//#line 67 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.NetworkSettingsWifiSelectionChannel = 0;
//#line 67 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.NetworkSettingsWifiSelectionChannel = 50;
//#line 67 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.NetworkSettingsWifiSelectionChannel = 0;
//#line 67 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      networksettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("NetworkSettingsWifiSelectionChannel", "int", 0, "The channel (not used in auto mode)", "", &BebopArdrone3Config::NetworkSettingsWifiSelectionChannel)));
//#line 67 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("NetworkSettingsWifiSelectionChannel", "int", 0, "The channel (not used in auto mode)", "", &BebopArdrone3Config::NetworkSettingsWifiSelectionChannel)));
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      networksettings.convertParams();
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::NETWORKSETTINGS, BebopArdrone3Config::DEFAULT>(networksettings)));
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::NETWORKSETTINGS, BebopArdrone3Config::DEFAULT>(networksettings)));
BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::SETTINGS, BebopArdrone3Config::DEFAULT> settings("settings", "", 0, 4, true, &BebopArdrone3Config::DEFAULT::settings);
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      settings.convertParams();
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::SETTINGS, BebopArdrone3Config::DEFAULT>(settings)));
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::SETTINGS, BebopArdrone3Config::DEFAULT>(settings)));
BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::PICTURESETTINGS, BebopArdrone3Config::DEFAULT> picturesettings("picturesettings", "", 0, 5, true, &BebopArdrone3Config::DEFAULT::picturesettings);
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      picturesettings.convertParams();
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::PICTURESETTINGS, BebopArdrone3Config::DEFAULT>(picturesettings)));
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::PICTURESETTINGS, BebopArdrone3Config::DEFAULT>(picturesettings)));
BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::GPSSETTINGS, BebopArdrone3Config::DEFAULT> gpssettings("gpssettings", "", 0, 6, true, &BebopArdrone3Config::DEFAULT::gpssettings);
//#line 82 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.GPSSettingsHomeTypeType = 0;
//#line 82 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.GPSSettingsHomeTypeType = 1;
//#line 82 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.GPSSettingsHomeTypeType = 0;
//#line 82 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      gpssettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("GPSSettingsHomeTypeType", "int", 0, "The type of the home position", "{'enum_description': 'The type of the home position', 'enum': [{'srcline': 79, 'description': 'The drone will try to return to the take off position', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'GPSSettingsHomeTypeType_TAKEOFF'}, {'srcline': 80, 'description': 'The drone will try to return to the pilot position', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'GPSSettingsHomeTypeType_PILOT'}]}", &BebopArdrone3Config::GPSSettingsHomeTypeType)));
//#line 82 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("GPSSettingsHomeTypeType", "int", 0, "The type of the home position", "{'enum_description': 'The type of the home position', 'enum': [{'srcline': 79, 'description': 'The drone will try to return to the take off position', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'GPSSettingsHomeTypeType_TAKEOFF'}, {'srcline': 80, 'description': 'The drone will try to return to the pilot position', 'srcfile': '/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'GPSSettingsHomeTypeType_PILOT'}]}", &BebopArdrone3Config::GPSSettingsHomeTypeType)));
//#line 84 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __min__.GPSSettingsReturnHomeDelayDelay = 0;
//#line 84 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __max__.GPSSettingsReturnHomeDelayDelay = 120;
//#line 84 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __default__.GPSSettingsReturnHomeDelayDelay = 0;
//#line 84 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      gpssettings.abstract_parameters.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("GPSSettingsReturnHomeDelayDelay", "int", 0, "Delay in second", "", &BebopArdrone3Config::GPSSettingsReturnHomeDelayDelay)));
//#line 84 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      __param_descriptions__.push_back(BebopArdrone3Config::AbstractParamDescriptionConstPtr(new BebopArdrone3Config::ParamDescription<int>("GPSSettingsReturnHomeDelayDelay", "int", 0, "Delay in second", "", &BebopArdrone3Config::GPSSettingsReturnHomeDelayDelay)));
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      gpssettings.convertParams();
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::GPSSETTINGS, BebopArdrone3Config::DEFAULT>(gpssettings)));
//#line 107 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT::GPSSETTINGS, BebopArdrone3Config::DEFAULT>(gpssettings)));
//#line 233 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 233 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(BebopArdrone3Config::AbstractGroupDescriptionConstPtr(new BebopArdrone3Config::GroupDescription<BebopArdrone3Config::DEFAULT, BebopArdrone3Config>(Default)));
//#line 353 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<BebopArdrone3Config::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<BebopArdrone3Config::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<BebopArdrone3Config::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    BebopArdrone3Config __max__;
    BebopArdrone3Config __min__;
    BebopArdrone3Config __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const BebopArdrone3ConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static BebopArdrone3ConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &BebopArdrone3Config::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const BebopArdrone3Config &BebopArdrone3Config::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const BebopArdrone3Config &BebopArdrone3Config::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const BebopArdrone3Config &BebopArdrone3Config::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<BebopArdrone3Config::AbstractParamDescriptionConstPtr> &BebopArdrone3Config::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<BebopArdrone3Config::AbstractGroupDescriptionConstPtr> &BebopArdrone3Config::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const BebopArdrone3ConfigStatics *BebopArdrone3Config::__get_statics__()
  {
    const static BebopArdrone3ConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = BebopArdrone3ConfigStatics::get_instance();
    
    return statics;
  }

//#line 21 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_PilotingSettingsAbsolutControlOn_OFF = 0;
//#line 22 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_PilotingSettingsAbsolutControlOn_ON = 1;
//#line 29 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_OFF = 0;
//#line 30 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_ON = 1;
//#line 42 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_SpeedSettingsHullProtectionPresent_OFF = 0;
//#line 43 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_SpeedSettingsHullProtectionPresent_ON = 1;
//#line 48 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_SpeedSettingsOutdoorOutdoor_OFF = 0;
//#line 49 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_SpeedSettingsOutdoorOutdoor_ON = 1;
//#line 57 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_NetworkSettingsWifiSelectionType_auto = 0;
//#line 58 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_NetworkSettingsWifiSelectionType_manual = 1;
//#line 62 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_NetworkSettingsWifiSelectionBand_2_4ghz = 0;
//#line 63 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_NetworkSettingsWifiSelectionBand_5ghz = 1;
//#line 64 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_NetworkSettingsWifiSelectionBand_all = 2;
//#line 79 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_GPSSettingsHomeTypeType_TAKEOFF = 0;
//#line 80 "/home/robot/bebop_ws/src/bebop_autonomy/bebop_driver/cfg/autogenerated/bebop_ardrone3.cfg"
      const int BebopArdrone3_GPSSettingsHomeTypeType_PILOT = 1;
}

#endif // __BEBOPARDRONE3RECONFIGURATOR_H__
